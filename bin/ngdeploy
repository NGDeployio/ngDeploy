#!/usr/bin/env node


var program = require('commander');
var request = require('request');
var fs = require('fs');
var path = require('path');
var glob = require("glob");
var async = require("async");
var s3 = require('s3');


var system = {
    name: '',
    version: '0.0.1',
    dist: './dist',
    path: process.cwd(),
    endpoint: 'https://api.ngdeploy.com',
}

program
    .version(system.version)
    .command('init <appName> <dist>')
    .action(function(appName, dist) {
        if (appName == undefined || appName.length < 1) return;
        var appName = appName.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '').split(' ').join('_');
        system.name = appName;



        if (dist) system.dist = dist;

        request
            .post({
                headers: [
                    "Content-Type: application/json"
                ],
                url: system.endpoint+'/apps',
                form: system
            }, function(err, response, body) {
                system.id = JSON.parse(body).id;
                fs.writeFile(".ngdeploy", JSON.stringify(system), function(err) {
                    if (err) {
                        return console.log(err);
                    }


                });

            });

    });







program
    .version(system.version)
    .command('upload')
    .action(function() {

        var root = process.cwd();

        var next = function() {
            if (root === path.sep) return {
                value: undefined,
                done: true
            };

            var file = path.join(root, '.ngdeploy'),
                data;

            root = path.resolve(root, '..');

            if (fs.existsSync(file) && (data = fs.readFileSync(file))) {
                data.__path = file;

                return {
                    value: data,
                    done: false
                };
            }
            return next();
        }
        var results = next();
        var config = JSON.parse(results.value.toString());


        var url = system.endpoint + '/policy?name=' + config.name;
        console.log(url)
        request.get(url, function(error, response, body) {
            console.log(body)

            var response = JSON.parse(body);
            var data = response.data;
            var s3Options = {
                accessKeyId: data.Credentials.AccessKeyId,
                secretAccessKey: data.Credentials.SecretAccessKey,
                sessionToken: data.Credentials.SessionToken
                // any other options are passed to new AWS.S3() 
                // See: http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Config.html#constructor-property 
            }

            var client = s3.createClient({
                maxAsyncS3: 20, // this is the default 
                s3RetryCount: 3, // this is the default 
                s3RetryDelay: 1000, // this is the default 
                multipartUploadThreshold: 20971520, // this is the default (20 MB) 
                multipartUploadSize: 15728640, // this is the default (15 MB) 
                s3Options: s3Options,
            });


            var p = path.join(config.path, config.dist);
            var name =  config.name;
            var params = {
                localDir: p,
                deleteRemoved: true, // default false, whether to remove s3 objects 
                // that have no corresponding local file. 

                s3Params: {
                    Bucket: "ngdeploy",
                    Prefix: name,
                    // other options supported by putObject, except Body and ContentLength. 
                    // See: http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putObject-property 
                },
            };
            var uploader = client.uploadDir(params);
            uploader.on('error', function(err) {
                console.error("unable to sync:", err);
            });
            uploader.on('progress', function() {
                console.log("progress", uploader.progressAmount, uploader.progressTotal);
            });
            uploader.on('end', function() {
                console.log("done uploading");
            });
        });
    })







program.parse(process.argv);
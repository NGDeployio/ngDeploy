#! /usr/bin/env node
'use strict';

var program = require('commander');
var ng    = require('../lib/cli');
var pkg   = require('../package');
var domain = require('../lib/domain');
var utils = require('../lib/utils');
var https = require('../lib/https');

program
    .version(pkg.version);


program
    .command('init <appName> [dist]')
    .description('Initialize ngdeploy with <appName> and <distribution folder>')
    .action(function (appName, dist, opts) {
        if (appName && dist && opts) {
          ng.init(appName, dist, opts);
        } else {
          ng.initWithPrompt();
        }
     });

program
    .command('open')
    .description('Open the current web app in the browser.')
    .option('-n, --appName','Open the specific application by appName. ',null,null)
    .option('-i, --appId', 'Open the specific application by appId', null,null)
    .option('-s, --stage', 'Specify the stage, default development',/^(development|staging|production)$/i,'development')
    .action(utils.open);

program
    .command('create <appName>')
    .option('-a, --accountToken <token>', 'use the access token',null,null)
    .description('Create the app <appName>')
    .action(function (appName, opts) {
        ng.create({ ngDeployUrl: appName, name: appName }, opts.accountToken);
      });

program
    .command('push')
    .description('deploy the distribution directory to your ngDeploy project')
    .action(ng.push);

program
    .command('delete')
    .option('--appId <appId>','Application id', null,null)
    .option('-a, --accountToken <token>', 'use the access token',null,null)
    .action(ng.delete);


program
    .command('domain:add')
    .option('--appId <appId>','Application id', null,null)
    .option('-d, --domain <domain>', 'domain to add',null,null)
    .option('-a, --accountToken <token>', 'use the access token',null,null)
    .action(domain.add);

program
    .command('domain:remove')
    .option('--appId <appId>','Application id', null,null)
    .option('-a, --accountToken <token>', 'use the access token',null,null)
    .action(domain.add);

program
    .command('domain:purge')
    .option('--appId <appId>','Application id', null,null)
    .option('-a, --accountToken <token>', 'use the access token',null,null)
    .action(domain.purge);

program
    .command('domain:upgrade')
    .option('--appId <appId>','Application id', null,null)
    .option('-a, --accountToken <token>', 'use the access token',null,null)
    .action(domain.upgrade);

program
    .command('setEnv <appId> <stage> <kv>')
    .action(function (appId, stage, kv) {
        ng.setEnv(appId, stage, kv);
      });

program
    .command('set')
    .option('-g, --global', 'set globally into ~/.ngdeploy', null, null)
    .option('-a, --accountToken <token>', 'use the access token',null,null)
    .action(function (opts) {
        ng.setAccountToken(opts.accountToken, opts.global);
    });

program
    .command('https <action>')
    .option('--appId <appId>','Application id', null,null)
    .option('-d, --domain <domain>', 'Domain to assign https to',null,null)
    .option('-k, --pathToKey <path>', "Path to .key file.", null,null)
    .option('-c, --pathToCert <path>', "Path to .cert file.", null,null)
    .option('-a, --accountToken <token>', 'use the access token',null,null)
    .action(https.perform);


program
    .command('promote')
    .option('--appId <appId>', 'app id to promote')
    .option('-t, --to <target>', '[staging,production]', /^(staging|production)$/i, 'staging')
    .description('Promote an application to staging or production')
    .action(ng.promote);

program
    .command('list')
    .option('-a, --accountToken <token>', 'use the access token',null,null)
    .description('List all of your apps')
    .action(ng.list);

program
    .command('clean')
    .option('-g, --global','remove global configuration at ~/.ngdeploy',null,null)
    .option('-l, --local','remove local configuration at ./',null, null)
    .description('remove .ngdeploy configuration')
    .action(ng.clean);


program
    .command("login")
    .option('-a, --accountToken <token>', 'use the access token',null,null)
    .option('-g, --global','globally login', null, null)
    .action(ng.login);

program
    .command("logout")
    .option('-g, --global','globally logout', null, null)
    .action(ng.logout);

program.on('--help', function () {
         ng.additionalHelp();
    });

program.parse(process.argv);

if (program.args.length === 0) {
  ng.usage();
}